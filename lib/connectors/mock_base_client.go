// Code generated by mockery v2.38.0. DO NOT EDIT.

// NOTE: run 'make update-mocks' from this project top folder to update this file and generate new ones.

package connectors

import (
	tls "crypto/tls"

	mock "github.com/stretchr/testify/mock"
)

// MockBaseClient is an autogenerated mock type for the BaseClient type
type MockBaseClient struct {
	mock.Mock
}

// CreateConnector provides a mock function with given fields: req
func (_m *MockBaseClient) CreateConnector(req CreateConnectorRequest) (ConnectorResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnector")
	}

	var r0 ConnectorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(CreateConnectorRequest) (ConnectorResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(CreateConnectorRequest) ConnectorResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(ConnectorResponse)
	}

	if rf, ok := ret.Get(1).(func(CreateConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnector provides a mock function with given fields: req
func (_m *MockBaseClient) DeleteConnector(req ConnectorRequest) (EmptyResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnector")
	}

	var r0 EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(ConnectorRequest) (EmptyResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(ConnectorRequest) EmptyResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *MockBaseClient) GetAll() (GetAllConnectorsResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 GetAllConnectorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (GetAllConnectorsResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() GetAllConnectorsResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(GetAllConnectorsResponse)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTasks provides a mock function with given fields: req
func (_m *MockBaseClient) GetAllTasks(req ConnectorRequest) (GetAllTasksResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 GetAllTasksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(ConnectorRequest) (GetAllTasksResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(ConnectorRequest) GetAllTasksResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(GetAllTasksResponse)
	}

	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnector provides a mock function with given fields: req
func (_m *MockBaseClient) GetConnector(req ConnectorRequest) (ConnectorResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetConnector")
	}

	var r0 ConnectorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(ConnectorRequest) (ConnectorResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(ConnectorRequest) ConnectorResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(ConnectorResponse)
	}

	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectorConfig provides a mock function with given fields: req
func (_m *MockBaseClient) GetConnectorConfig(req ConnectorRequest) (GetConnectorConfigResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectorConfig")
	}

	var r0 GetConnectorConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(ConnectorRequest) (GetConnectorConfigResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(ConnectorRequest) GetConnectorConfigResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(GetConnectorConfigResponse)
	}

	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectorStatus provides a mock function with given fields: req
func (_m *MockBaseClient) GetConnectorStatus(req ConnectorRequest) (GetConnectorStatusResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectorStatus")
	}

	var r0 GetConnectorStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(ConnectorRequest) (GetConnectorStatusResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(ConnectorRequest) GetConnectorStatusResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(GetConnectorStatusResponse)
	}

	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskStatus provides a mock function with given fields: req
func (_m *MockBaseClient) GetTaskStatus(req TaskRequest) (TaskStatusResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskStatus")
	}

	var r0 TaskStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(TaskRequest) (TaskStatusResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(TaskRequest) TaskStatusResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(TaskStatusResponse)
	}

	if rf, ok := ret.Get(1).(func(TaskRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseConnector provides a mock function with given fields: req
func (_m *MockBaseClient) PauseConnector(req ConnectorRequest) (EmptyResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for PauseConnector")
	}

	var r0 EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(ConnectorRequest) (EmptyResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(ConnectorRequest) EmptyResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartConnector provides a mock function with given fields: req
func (_m *MockBaseClient) RestartConnector(req ConnectorRequest) (EmptyResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for RestartConnector")
	}

	var r0 EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(ConnectorRequest) (EmptyResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(ConnectorRequest) EmptyResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartTask provides a mock function with given fields: req
func (_m *MockBaseClient) RestartTask(req TaskRequest) (EmptyResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for RestartTask")
	}

	var r0 EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(TaskRequest) (EmptyResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(TaskRequest) EmptyResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(TaskRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeConnector provides a mock function with given fields: req
func (_m *MockBaseClient) ResumeConnector(req ConnectorRequest) (EmptyResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ResumeConnector")
	}

	var r0 EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(ConnectorRequest) (EmptyResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(ConnectorRequest) EmptyResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(EmptyResponse)
	}

	if rf, ok := ret.Get(1).(func(ConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBasicAuth provides a mock function with given fields: username, password
func (_m *MockBaseClient) SetBasicAuth(username string, password string) {
	_m.Called(username, password)
}

// SetClientCertificates provides a mock function with given fields: certs
func (_m *MockBaseClient) SetClientCertificates(certs ...tls.Certificate) {
	_va := make([]interface{}, len(certs))
	for _i := range certs {
		_va[_i] = certs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// SetDebug provides a mock function with given fields:
func (_m *MockBaseClient) SetDebug() {
	_m.Called()
}

// SetHeader provides a mock function with given fields: name, value
func (_m *MockBaseClient) SetHeader(name string, value string) {
	_m.Called(name, value)
}

// SetInsecureSSL provides a mock function with given fields:
func (_m *MockBaseClient) SetInsecureSSL() {
	_m.Called()
}

// UpdateConnector provides a mock function with given fields: req
func (_m *MockBaseClient) UpdateConnector(req CreateConnectorRequest) (ConnectorResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnector")
	}

	var r0 ConnectorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(CreateConnectorRequest) (ConnectorResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(CreateConnectorRequest) ConnectorResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(ConnectorResponse)
	}

	if rf, ok := ret.Get(1).(func(CreateConnectorRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateConnectorConfig provides a mock function with given fields: req
func (_m *MockBaseClient) ValidateConnectorConfig(req ValidateConnectorConfigRequest) (ValidateConnectorConfigResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConnectorConfig")
	}

	var r0 ValidateConnectorConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(ValidateConnectorConfigRequest) (ValidateConnectorConfigResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(ValidateConnectorConfigRequest) ValidateConnectorConfigResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(ValidateConnectorConfigResponse)
	}

	if rf, ok := ret.Get(1).(func(ValidateConnectorConfigRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockBaseClient creates a new instance of MockBaseClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBaseClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBaseClient {
	mock := &MockBaseClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
